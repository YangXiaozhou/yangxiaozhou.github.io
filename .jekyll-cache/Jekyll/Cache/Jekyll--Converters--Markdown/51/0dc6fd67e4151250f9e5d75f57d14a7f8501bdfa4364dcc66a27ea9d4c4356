I"•^<p><em>A comprehensive guide to the classic and elegent EM algorithm: what it is, how it works, why it works and how to improve it.</em></p>

<ul id="markdown-toc">
  <li><a href="#motivating-examples-why-do-we-care" id="markdown-toc-motivating-examples-why-do-we-care">Motivating examples: Why do we care?</a></li>
  <li><a href="#general-framework-what-is-em" id="markdown-toc-general-framework-what-is-em">General framework: What is EM?</a></li>
  <li><a href="#em-in-action-does-it-really-work" id="markdown-toc-em-in-action-does-it-really-work">EM in action: Does it really work?</a></li>
  <li><a href="#why-does-it-work" id="markdown-toc-why-does-it-work">Why does it work?</a></li>
  <li><a href="#dig-deeper-sois-it-perfect" id="markdown-toc-dig-deeper-sois-it-perfect">Dig deeper: So‚Ä¶is it perfect?</a></li>
  <li><a href="#uncertainty-going-beyond-point-estimate-" id="markdown-toc-uncertainty-going-beyond-point-estimate-">Uncertainty: Going beyond point estimate üò±</a></li>
  <li><a href="#references" id="markdown-toc-references">References</a></li>
</ul>
<p>Well, let‚Äôs see. It‚Äôs the algorithm that solves Gaussian mixture model, a popular clustering approach. The Baum-Welch algorithm that solves hidden Markov model problems is a special case of EM. It‚Äôs taught at almost all computational statistics classes. All in all, it‚Äôs a classic, powerful, and versatile statistical learning technique that also extends itself in many ways: Monte Carlo EM, Stochastic EM, and Online EM, to name a few. This article is my take on introducing EM for what it is, how it works, and how it might be improved.</p>

<p>We start with two motivating examples (unsupervised learning and evolution). Then we see exactly what EM is in its general form. We get back in action and use EM to solve the two examples. For those curious souls, we then explain both intuitively and mathematically why EM works like a charm. Most EM tutorials would stop here, but we‚Äôre going to turn it up a notch. We will see some limitations of EM and ways to deal with them. Lastly, we want to go beyond point estimates and quantify the uncertainty with estimates produced by EM.</p>

<h2 id="motivating-examples-why-do-we-care">Motivating examples: Why do we care?</h2>

<p>Maybe you already know why you want to use EM, or maybe you don‚Äôt. Either way, let me use two motivating examples to set the stage for EM. These are quite lengthy, I know, but they perfectly highlight the common feature of the problems that EM is best at solving: the presence of <strong>missing information</strong>.</p>

<h3 id="unsupervised-learning-solving-gaussian-mixture-model-for-clustering">Unsupervised learning: Solving Gaussian mixture model for clustering</h3>

<p>Suppose you have a data set with n number of data points. It could be a group of customers visiting your website (customer profiling) or an image with different objects in it (image segmentation). Clustering is the task of finding out k number of natural groups for your data when you don‚Äôt know (or don‚Äôt specify) the real grouping. This is an unsupervised learning problem because no ground-truth labels are used.</p>

<p>Such clustering problem can be tackled by several types of algorithms, e.g., combinatorial type such as k-means or hierarchical type such as Ward‚Äôs hierarchical clustering. However, if you believe that your data could be better modeled as a mixture of normal distributions, then you would go for Gaussian mixture model (GMM).</p>

<p>The underlying idea of GMM is this, you assume that behind your data, there‚Äôs a data generating mechanism. This mechanism first choses one of the k normal distributions (with a certain probability) and then delivers a sample from that distribution. Therefore, once you have estimated the parameters of each normal distribution, you could easily cluster each data point by selecting the one that gives the highest likelihood.</p>

<p>
  <img width="1024" alt="ClusterAnalysis Mouse" src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/ClusterAnalysis_Mouse.svg/1024px-ClusterAnalysis_Mouse.svg.png" />
</p>
<p><strong>FIGURE 1.</strong><i> An <a href="https://commons.wikimedia.org/wiki/File:ClusterAnalysis_Mouse.svg">example</a> of mixture of Gaussian data and clustering using k-means and GMM (solved by EM).</i></p>

<p>However, estimating the parameters is not a simple task since we do not know which distribution generated which points (<strong>missing information</strong>). EM is an algorithm that can help us solve exactly this problem. This is why EM is the underlying algorithm for solving GMMs in scikit-learn‚Äôs <a href="https://scikit-learn.org/stable/modules/mixture.html#gaussian-mixture">implementation</a>.</p>

<h4 id="population-genetics-estimating-moth-allele-frequencies-to-observe-natural-selection">Population genetics: Estimating moth allele frequencies to observe natural selection</h4>

<p>Have you heard the phrase ‚Äúindustrial melanism‚Äù before? It‚Äôs a term coined by biologists in the 19th century to describe the phenomenon that animals change their skin color due to the heavy industrialization in the cities. In particular, they observed that previously rare dark peppered moth started to dominate the population in industrialized coal-fueled cities. Scientists at the time were surprised and fascinated by this observation. Subsequent research suggests that the industrialized cities tend to have darker tree barks which disguise darker moths better than the light ones.</p>

<p align="center">
  <img src="/assets/intro-to-EM/dark_light_moth.png" alt="pepper_moths" style="zoom: 75%;" />
</p>
<p><strong>FIGURE 2.</strong> <i>Dark (top) and light (bottom) peppered moth. Image by Jerzy Strzelecki via Wikimedia Commons</i></p>

<p>As a result, dark moths survive the predation better and pass on their genes, giving rise to a predominantly dark peppered moth population.  To prove their natural selection theory, scientists first need to estimate the percentage of black-producing and light-producing genes/alleles present in the moth population. The gene responsible for the moth‚Äôs color has three types of alleles: C, I and T. Genotypes <strong>C</strong>C, <strong>C</strong>I, and <strong>C</strong>T produce dark peppered moth (<em>Carbonaria</em>); <strong>T</strong>T produces light peppered moth (<em>Typica</em>); <strong>I</strong>I and <strong>I</strong>T produce moths with intermediate color (<em>Insularia</em>).</p>

<p>Here‚Äôs a hand-drawn graph that shows the <strong>observed</strong> and <strong>missing</strong> information.</p>

<p align="center">
  <img src="/assets/intro-to-EM/moth_relationship.jpg" alt="moth_relationship" style="zoom: 100%;" />
</p>
<p><strong>FIGURE 3.</strong><i> Relationship between peppered moth alleles, genotypes, and phenotypes. We observed phenotypes, but wish to estimate percentges of alleles in the population. Image by author</i></p>

<p>We wish to know the percentages of C, I, and T in the population. However, we can only observe the number of <em>Carbonaria</em>, <em>Typica</em>, and <em>Insularia</em> moths by capturing them, but not the genotypes (<strong>missing information</strong>). The fact that we do not observe the genotypes and multiple genotypes produce the same subspecies make the calculation of the allele frequencies difficult. This is where EM comes in to play. With EM, we can easily estimate the allele frequencies and provide concrete evidence for the microevolution that happens on a human time scale due to environmental  pollution.</p>

<p>How does EM tackle the GMM problem and the peppered moth problem in the presence of missing information? We will illustrate these in the later section. But first, let‚Äôs see what EM is really about.</p>

<h2 id="general-framework-what-is-em">General framework: What is EM?</h2>

<p>At this point, you must be thinking (I hope): All these examples are wonderful, but what is really EM? Let‚Äôs dive into it.</p>

<p>EM algorithm is an iterative optimization method that finds the maximum likelihood estimate (MLE) of parameters in problems where hidden/missing/latent variables are present. It was first introduced in its full generality by Dempster, Laird, and Rubin (1977) in their famous paper<sup id="fnref:Dempster"><a href="#fn:Dempster" class="footnote">1</a></sup> (currently 62k citations). Since then, it has been widely used for its easy implementation, numerical stability, and strong empirical performance.</p>

<p>Let‚Äôs set up the EM for a general problem and introduce some notations. Suppose that $Y$ are our observed variables, $X$ are hidden variables, and we say that the pair $(X, Y)$ is the complete data. We also denote any unknown parameter of interest as $\theta \in \Theta$. The objective of most parameter estimation problems is to find the most probable $\theta$ given our model and data, i.e.,</p>

<script type="math/tex; mode=display">\begin{equation}
\theta = \arg\max_{\theta \in \Theta} p_\theta(\mathbf{y}) \,,
\end{equation}</script>

<p>where  $p_\theta(\mathbf{y})$ is the incomplete-data likelihood. Using the law of <a href="https://en.wikipedia.org/wiki/Law_of_total_probability">total probability</a>, we can also express the incomplete-data likelihood as</p>

<script type="math/tex; mode=display">p_\theta(\mathbf{y}) = \int p_\theta(\mathbf{x}, \mathbf{y}) d\mathbf{x} \,,</script>

<p>where $p_\theta(\mathbf{x}, \mathbf{y})$ is known as the complete-data likelihood.</p>

<p>What‚Äôs with all these complete- and incomplete-data likelihoods? In many problems, the maximization of the incomplete-data likelihood $p_\theta(\mathbf{y})$ is difficult because of the missing information. On the other hand, it‚Äôs often easier to work with complete-data likelihood. EM algorithm is designed to take advantage of this observation. It iterates between an <strong>expectation step</strong> (E-step) and a <strong>maximization step</strong> (M-step) to find the MLE.</p>

<p>Assuming $\theta^{(n)}$ is the estimate obtained at the $n$th iteration, the algorithm iterates between the two steps as follows:</p>

<ul>
  <li>
    <p><strong>E-step</strong>: define 
$Q(\theta | \theta^{(n)})$ as the conditional expectation of the complete-data log-likelihood w.r.t. the hidden variables, given observed data and current parameter estimate, i.e.,</p>

    <script type="math/tex; mode=display">\begin{align}
\label{eqn:e_step}
Q(\theta | \theta^{(n)}) = \mathbb{E}_{X|\mathbf{y}, \theta^{(n)}}\left[\ln p_\theta(\mathbf{x}, \mathbf{y})\right] \,.
\end{align}</script>
  </li>
  <li>
    <p><strong>M-step</strong>: find a new $\theta$ that maximizes the above expectation and set it to $\theta^{(n+1)}$, i.e.,</p>
  </li>
</ul>

<script type="math/tex; mode=display">\begin{align}
  \label{eqn:m_step}
  \theta^{(n+1)} = \arg\max_{\theta \in \Theta} Q(\theta | \theta^{(n)}) \,.
  \end{align}</script>

<p>The above definitions might seem hard-to-grasp at first. Some intuitive explanation might help:</p>

<ul>
  <li><strong>E-step</strong>: This step is asking, given our observed data $\mathbf{y}$ and current parameter estimate $\theta^{(n)}$, what are the probabilities of different $X$? Also, under these probable $X$, what are the corresponding log-likelihoods?</li>
  <li><strong>M-step</strong>: Here we ask, under these probable $X$, what is the value of $\theta$ that gives us the maximum expected log-likelihood?</li>
</ul>

<p>The algorithm iterates between these two steps until a stopping criterion is reached, e.g., when either the Q function or the parameter estimate has converged. The entire process can be illustrated in the following flowchart.</p>

<p align="center">
  <img src="/assets/intro-to-EM/em_flowchart.png" alt="em_flowchart" style="zoom: 100%;" />
</p>
<p><strong>FIGURE 4.</strong> <i>The EM algorithm iterates between E-step and M-step to obtain MLEs and stop when the estimates have converged. Image by author</i></p>

<p>That‚Äôs it! With two equations and a bunch of iterations, you have just unlocked one of the most elegant statistical inference techniques!</p>

<h2 id="em-in-action-does-it-really-work">EM in action: Does it really work?</h2>

<p>What we‚Äôve seen above is the general framework of EM, not the actual implementation of it. We‚Äôve known the essence of EM, i.e., how it works, but do not yet know how to implement it or why it works. In this section, we are going to see step-by-step just how EM is implemented to solve the two previously mentioned examples. After verifying that EM does work for these problems, we then see intuitively and mathematically why it works in the next section.</p>

<h3 id="solving-gmm-for-clustering">Solving GMM for clustering</h3>

<p>Suppose we have some data and would like to model the density of them.</p>

<p align="center">
  <img src="/assets/intro-to-EM/mixture_example.png" alt="mixture_example" style="zoom: 100%;" />
</p>

<p><strong>FIGURE 5.</strong> <i>1000 points generated as a mixture of three different normal distributions. Image by author</i></p>

<p>Apparently these data come from three different distributions, thus a single normal distribution would not be appropriate and we use a mixture approach. In general, GMM-based clustering is the task of clustering $y_1, \dots, y_n$ data points into $k$ groups. We let</p>

<script type="math/tex; mode=display">x_{ik}=\left\{\begin{array}{l}
1 \quad \text{if $y_i$ is in group $k$}\\
0 \quad \text{otherwise}
\end{array}\right.</script>

<p>Thus, $x_i$ is the one-hot coding of data $y_1$, i.e., $x_i = [0, 0, 1]$ if $k = 3$ and $y_1$ is from group 3. In this case, the collection of data points $\mathbf{y}$ is the incomplete data, and $(\mathbf{x}, \mathbf{y})$ is the augmented complete data. We further assume that each group follows a normal distribution, i.e.,</p>

<script type="math/tex; mode=display">y_i \mid x_{ik} = 1 \sim N(\mu_k, \Sigma_k) \,.</script>

<p>Following the usual mixture Gaussian model set up, a new point is generated from the $k$th group with probability $P(x_{ik} = 1) = w_k$ and $\sum_{i=1}^{k} w_i = 1$. Suppose we are only working with the incomplete data $\mathbf{y}$. The likelihood of one data point under a GMM is</p>

<script type="math/tex; mode=display">\begin{align} p(y_i) = \sum_{j=1}^k w_j \phi(y_i; \mu_j, \Sigma_j) \,, \end{align}</script>

<p>where $\phi(\cdot; \mu, \Sigma)$ is the PDF of a normal distribution with mean $\mu$ and variance-covariance $\Sigma$. The total log-likelihood is</p>

<script type="math/tex; mode=display">\begin{align}
\ln p(\mathbf{y}) = \sum_{i=1}^{n} \ln \sum_{j=1}^k w_j \phi(y_i; \mu_j, \Sigma_j) \,.
\end{align}</script>

<p>In our problem, we are trying to estimate three groups of parameters: the group mixing probabilities ($\mathbf{w}$) and each distribution‚Äôs mean and covariance matrix ($\boldsymbol{\mu}, \boldsymbol{\Sigma}$). The usual approach to parameter estimation is by maximizing the above total log-likelihood function w.r.t. each parameter (MLE). However, this is difficult to do due to the summation inside the $\log$ term.</p>

<h4 id="expectation-step">Expectation step</h4>

<p>Let‚Äôs use the EM approach instead! Remember that we first need to define the Q function in the E-step, which is a conditional expectation of the complete data log-likelihood. Since $(\mathbf{x}, \mathbf{y})$ is the complete data, the corresponding complete data likelihood of one data point is 
<script type="math/tex">p(x_i, y_i) = \Pi_{j=1}^k \{w_j \phi(y_i; \mu_j, \Sigma_j)\}^{x_{ij}} \,,</script></p>

<p>and only the term with $x_{ij} = 1$ is active. Hence, our total complete data log-likelihood is</p>

<script type="math/tex; mode=display">\ln p(\mathbf{x}, \mathbf{y}) = \sum_{i=1}^{n}\sum_{j=1}^k x_{ij}\ln \{w_j \phi(y_i; \mu_j, \Sigma_j)\} \,.</script>

<p>Denote $\theta$ as the collection of unknown parameters $(\mathbf{w}, \boldsymbol{\mu}, \boldsymbol{\Sigma})$, and $\theta^{(n)}$ as the estimates from the last iteration. Following the E-step formula in ($\ref{eqn:e_step}$), we obtain the Q function as</p>

<script type="math/tex; mode=display">\begin{align}
\label{eqn:gmm_e_step}
Q(\theta | \theta^{(n)}) = \sum_{i=1}^{n}\sum_{j=1}^k z_{ij}^{(n)} \ln \{w_j \phi(y_i; \mu_j, \Sigma_j)\}  
\end{align}</script>

<p>where</p>

<script type="math/tex; mode=display">z_{ij}^{(n)} = \frac{\phi(y_i; \mu_j^{(n)}, \Sigma_j^{(n)}) w_j^{(n)}}{\sum_{l=1}^k \phi(y_i; \mu_l^{(n)}, \Sigma_l^{(n)}) w_l^{(n)}} \,.</script>

<p>Here $z_{ij}^{(n)}$ is the probability that data $y_i$ is in class $j$ with the current parameter estimates $\theta^{(n)}$. This probability is also called responsibility in some texts. It means the responsibility of each class to this data point. It‚Äôs also a constant given the observed data and $\theta^{(n)}$.</p>

<details>
    <summary>Derivation of the Q function:</summary>
$$
  \begin{align*}
Q(\theta | \theta^{(n)}) &amp;= \mathbb{E}_{X|\mathbf{y}, \theta^{(n)}}\left[\ln p_\theta(\mathbf{x}, \mathbf{y})\right] \\
&amp;= \mathbb{E}_{X|\mathbf{y}, \theta^{(n)}}\left[\sum_{i=1}^{n}\sum_{j=1}^k x_{ij}\ln \{w_j \phi(y_i; \mu_j, \Sigma_j)\}\right] \\
&amp;= \sum_{i=1}^{n}\sum_{j=1}^k \underbrace{\mathbb{E}_{X|\mathbf{y}, \theta^{(n)}}[x_{ij}]}_{\text{Expectation taken w.r.t. $X$}} \ln \{w_j \phi(y_i; \mu_j, \Sigma_j)\} \\
&amp;= \sum_{i=1}^{n}\sum_{j=1}^k p_{\theta^{(n)}}[x_{ij} = 1 \mid \mathbf{y}] \ln \{w_j \phi(y_i; \mu_j, \Sigma_j)\} \\
&amp;= \sum_{i=1}^{n}\sum_{j=1}^k
\underbrace{
\frac{p_{\theta^{(n)}}(y_{i} \mid x_{i} = j) p_{\theta^{(n)}}(x_i = j)}  {\sum_{l=1}^k{p_{\theta^{(n)}}(y_{i} \mid x_{i} = l) p_{\theta^{(n)}}(x_i = l)}}
}_{\text{Baye's rule}}
\ln \{w_j \phi(y_i; \mu_j, \Sigma_j)\}  \\
&amp;= \sum_{i=1}^{n}\sum_{j=1}^k
\underbrace{
\frac{\phi(y_i; \mu_j^{(n)}, \Sigma_j^{(n)}) w_j^{(n)}}{\sum_{l=1}^k \phi(y_i; \mu_l^{(n)}, \Sigma_l^{(n)}) w_l^{(n)}}
}_{\text{Substitue in current estimates}}
\ln \{w_j \phi(y_i; \mu_j, \Sigma_j)\} \\
&amp;= \sum_{i=1}^{n}\sum_{j=1}^k z_{ij}^{(n)} \ln \{w_j \phi(y_i; \mu_j, \Sigma_j)\}  
\end{align*}
$$
</details>

<h4 id="maximization-step">Maximization step</h4>

<p>Recall that the EM algorithm proceeds by iterating between the E-step and the M-step. We have obtained the latest iteration‚Äôs Q function in the E-step above. Next, we move on to the M-step and find a new $\theta$ that maximizes the Q function in ($\ref{eqn:gmm_e_step}$), i.e., we find</p>

<script type="math/tex; mode=display">\theta^{(n+1)} = \arg\max_{\theta \in \Theta} Q(\theta | \theta^{(n)}) \,.</script>

<p>A closer look at the obtained Q function reveals that it‚Äôs actually a weighted normal distribution MLE problem. That means, the new $\theta$ has close-form formula and can be verified easily using differentiation:
<script type="math/tex">% <![CDATA[
\begin{align}
w_j^{(n+1)} &= \frac{1}{n} \sum_{i=1}^{n} z_{ij}^{(n)} && \text{New mixing probabilities}\\
\mu_j^{(n+1)} &= \frac{\sum_{i=1}^{n} z_{ij}^{(n)} y_{i}}{\sum_{i=1}^{n} z_{ij}^{(n)}} &&\text{New means}\\
\Sigma_j^{(n+1)} &= \frac{\sum_{i=1}^{n} z_{ij}^{(n)} (y_{i} - \mu_j)(x^i - \mu)^T}{\sum_{i1}^{m} w_j^i}
\end{align} %]]></script></p>

<h3 id="estimating-allele-frequencies">Estimating allele frequencies</h3>

<p>Peppered moth <a href="https://askabiologist.asu.edu/peppered-moths-game/play.html">game</a></p>

<h2 id="why-does-it-work">Why does it work?</h2>

<h4 id="intuitive-explanation">Intuitive explanation</h4>

<details>
    <summary><b>Mathematical proof:</b></summary>
  Here we show why the above iterative scheme can find the maximum likelihood estimate of the parameter. Let $\ell(\theta) = \ln p_\theta(\mathbf{y})$, thus we have 

$$
\ell(\theta) - \ell(\theta^{(n)}) = \ln p_\theta(\mathbf{y}) - \ln p_{\theta^{(n)}}(\mathbf{y}) \,.
$$

We wish to compute an updated $\theta$ such that the above relationship holds above zero. Using $p_\theta(\mathbf{y}) = \int p_\theta(\mathbf{x}, \mathbf{y}) \, \mathrm{d}\mathbf{x}$, we have

$$
\begin{align*} \ell(\theta) - \ell(\theta^{(n)}) &amp;= \ln \int p_\theta(\mathbf{x}, \mathbf{y}) \, \mathrm{d}\mathbf{x} - \ln p_{\theta^{(n)}}(\mathbf{y}) \\
&amp;= \ln \int p_\theta(\mathbf{x}, \mathbf{y}) \frac{p_{\theta^{(n)}}(\mathbf{x} | \mathbf{y})}{p_{\theta^{(n)}}(\mathbf{x} | \mathbf{y})} \, \mathrm{d}\mathbf{x} 

- \ln p_{\theta^{(n)}}(\mathbf{y}) \\
  &amp;= \ln \mathbb{E}_{\mathbf{X} | \mathbf{y} , \theta^{(n)}}\left[\frac{p_\theta(\mathbf{x}, \mathbf{y})}{p_{\theta^{(n)}}(\mathbf{x} | \mathbf{y})}\right] - \ln p_{\theta^{(n)}}(\mathbf{y}) \\
  &amp;\ge \mathbb{E}_{\mathbf{X} | \mathbf{y} , \theta^{(n)}}\left[\ln \frac{p_\theta(\mathbf{x}, \mathbf{y})}{p_{\theta^{(n)}}(\mathbf{x} | \mathbf{y})}\right] - \ln p_{\theta^{(n)}}(\mathbf{y}) \\
  &amp;= \mathbb{E}_{\mathbf{X} | \mathbf{y} , \theta^{(n)}}\left[\ln \frac{p_\theta(\mathbf{x}, \mathbf{y})}{p_{\theta^{(n)}}(\mathbf{x} | \mathbf{y} ) p_{\theta^{(n)}}(\mathbf{y})}\right] \\
  &amp;:= \Delta(\theta | \theta^{(n)}) \,.
  \end{align*}
$$

The inequality step follows by Jensen's inequality and the fact that $\ln(\cdot)$ is concave on $[0, \infty]$. The second last step follows since $p_{\theta^{(n)}}(\mathbf{y})$ does not depend on $\mathbf{X}$. Therefore, we have 
$$
\ell(\theta) \ge \ell(\theta^{(n)}) + \Delta(\theta|\theta^{(n)}) \,.
$$
Define 

$$
\ell(\theta | \theta^{(n)}) := \ell(\theta^{(n)}) + \Delta(\theta|\theta^{(n)}) \,,
$$
then 
$\ell(\theta) \ge \ell(\theta|\theta^{(n)})$. 
That is, 
$\ell(\theta|\theta^{(n)})$ 
is upper-bounded by $\ell(\theta)$ for all $\theta \in \Theta$. The equality holds when $\theta = \theta^{(n)}$ since
$$
\begin{align*}
\ell(\theta^{(n)}|\theta^{(n)}) &amp;= \ell(\theta^{(n)}) + \Delta(\theta^{(n)}|\theta^{(n)}) \\
&amp;= \ell(\theta^{(n)}) + \mathbb{E}_{\mathbf{X} | \mathbf{y} , \theta^{(n)}}\left[\ln \frac{p_{\theta^{(n)}}(\mathbf{x}, \mathbf{y})}{p_{\theta^{(n)}}(\mathbf{x} | \mathbf{y} ) p_{\theta^{(n)}}(\mathbf{y})}\right] \\
&amp;= \ell(\theta^{(n)}) + \mathbb{E}_{\mathbf{X} | \mathbf{y} , \theta^{(n)}}\left[\ln \frac{p_{\theta^{(n)}}(\mathbf{x}, \mathbf{y})}{p_{\theta^{(n)}}(\mathbf{x}, \mathbf{y})}\right] \\
&amp;= \ell(\theta^{(n)}) \,.
\end{align*}
$$
Therefore, when computing an updated $\theta$, any increase in 
$\ell(\theta|\theta^{(n)})$ leads to an increase in $\ell(\theta)$ by at least 
$\Delta(\theta|\theta^{(n)})$. The observation is that, by selecting the $\theta$ that maximizes 
$\Delta(\theta|\theta^{(n)})$, we can achieve the largest increase in $\ell(\theta)$. Formally, we have 
$$
\begin{align*}
\theta^{(n+1)} &amp;= \arg\max_{\theta\in\Theta} \ell(\theta | \theta^{(n)}) \\
&amp; = \arg\max_{\theta\in\Theta} 
\left\lbrace
\ell(\theta^{(n)}) + \mathbb{E}_{\mathbf{X} | \mathbf{y} , \theta^{(n)}} 
\left[
\ln \frac{p_\theta(\mathbf{x}, \mathbf{y})}{p_{\theta^{(n)}}(\mathbf{x} | \mathbf{y}) p_{\theta^{(n)}}(\mathbf{y})}
\right]
\right\rbrace\\
&amp; = \underbrace{\arg\max_{\theta\in\Theta}}_{\text{Maximization}} \underbrace{\mathbb{E}_{\mathbf{X} | \mathbf{y} , \theta^{(n)}}}_{\text{Expectation}}[\ln p_\theta(\mathbf{x}, \mathbf{y})] \\
&amp; = \arg\max_{\theta\in\Theta} Q(\theta | \theta^{(n)}) \,,
\end{align*}
$$

where the second last step follows by dropping terms constant with respect to $\theta$. Thus, the E-step and M-step are made apparent in the formulation. Also, by maximizing 
  $\ell(\theta | \theta^{(n)})$ instead of $\ell(\theta)$, we have made use of the information of hidden variables $\mathbf{X}$ in the complete-data likelihood. 

</details>

<h2 id="dig-deeper-sois-it-perfect">Dig deeper: So‚Ä¶is it perfect?</h2>

<h4 id="improving-e-step">Improving E-step</h4>
<h4 id="improving-m-step">Improving M-step</h4>

<h2 id="uncertainty-going-beyond-point-estimate-">Uncertainty: Going beyond point estimate üò±</h2>

<hr />
<h2 id="references">References</h2>

<div class="footnotes">
  <ol>
    <li id="fn:Dempster">
      <p>Dempster, A. P., Laird, N. M., &amp; Rubin, D. B. (1977). Maximum likelihood from incomplete data via the EM algorithm. <em>Journal of the Royal Statistical Society: Series B (Methodological)</em>, <em>39</em>(1), 1-22.¬†<a href="#fnref:Dempster" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
:ET